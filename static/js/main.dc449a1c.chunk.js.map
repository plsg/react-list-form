{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Table","_this$props","this","props","tableData","removeTableData","react_default","a","createElement","Table_TableHeader","Table_TableBody","Component","TableHeader","TableBody","rows","map","row","index","key","name","job","onClick","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","_this$state","htmlFor","id","type","placeholder","onChange","App","tableDataValues","data","filter","i","toConsumableArray","concat","_this2","fetch","then","result","json","heading","className","entry","src_Table","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc449a1c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        const { tableData, removeTableData } = this.props;\r\n        return (\r\n            <table>\r\n                <TableHeader />\r\n                <TableBody\r\n                    tableData={tableData}\r\n                    removeTableData={removeTableData}\r\n                />\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Job</th>\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\nconst TableBody = props => {\r\n    const rows = props.tableData.map((row, index) => {\r\n        return (\r\n            <tr key={index}>\r\n                <td>{row.name}</td>\r\n                <td>{row.job}</td>\r\n                <td><button onClick={() => props.removeTableData(index)}>Delete</button></td>\r\n            </tr>\r\n        )\r\n    });\r\n    return <tbody>{rows}</tbody>;\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialState = {\r\n            name: '',\r\n            job: ''\r\n        };\r\n\r\n        this.state = this.initialState;\r\n    }\r\n    handleChange = event => {\r\n        const { name, value } = event.target;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    }\r\n    render() {\r\n        const { name, job } = this.state;\r\n        return (\r\n            <form>\r\n                <label htmlFor=\"name\">Name</label>\r\n                <input\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    placeholder=\"type a name\"\r\n                    value={name}\r\n                    onChange={this.handleChange} />\r\n                <label htmlFor=\"job\">Job</label>\r\n                <input\r\n                    id=\"job\"\r\n                    type=\"text\"\r\n                    name=\"job\"\r\n                    placeholder=\"type a job title\"\r\n                    value={job}\r\n                    onChange={this.handleChange} />\r\n                <input \r\n                    type=\"button\"\r\n                    value=\"Submit\"\r\n                    onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default Form;","import React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\n\nclass App extends Component {\n  state = {\n    tableDataValues: [],\n    data: []\n  };\n  componentDidMount() {\n    const url = \"https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*\";\n    // const url = \"https://ghibliapi.herokuapp.com/films\";\n    // const url = \"https://api.nasa.gov/planetary/apod?api_key=zLXx8dF0HBgIWlQ2txyzDODYZmjJ4PLAnMpkK0N5\";\n    fetch(url)\n      .then(result => result.json())\n      .then(result => {\n        this.setState({\n          data: result\n        })\n      });\n  }\n  removeTableData = index => {\n    const { tableDataValues } = this.state;\n    this.setState({\n      tableDataValues: tableDataValues.filter((tableDataValues, i) => {\n        return i !== index;\n      })\n    });\n  }\n  handleSubmit = tableDataValues => {\n    this.setState({ tableDataValues: [...this.state.tableDataValues, tableDataValues] });\n  }\n  render() {\n    // heading variables\n    const name = \"Tanya\";\n    const heading = <h1 className=\"site-heading\">Hello, {name} variable!</h1>\n\n    const { data } = this.state;\n    const result = data.map((entry, index) => {\n      return <li key={index}>{entry}</li>;\n    });\n\n    return (\n      <div className=\"App\">\n        {heading}\n        <Table\n          tableData={this.state.tableDataValues}\n          removeTableData={this.removeTableData}\n        />\n        <Form handleSubmit={this.handleSubmit} />\n        <ul>{result}</ul>;\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}